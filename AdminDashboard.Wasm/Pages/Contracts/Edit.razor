@page "/edit/{contractAddress}"
@using AdminDashboard.Wasm.Models.Contract
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject IDialogService DialogService
@attribute [Authorize]

<MudButton Variant="Variant.Filled" Style="margin-bottom: 15px" Color="Color.Primary" OnClick="@ExecuteContract">Execute contract</MudButton>

@if (contract == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Company details</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="contract.EmployeeId" Label="Employee Id" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.EmployeeName" Label="Employee Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.EmployeeSurname" Label="Employee Surname" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.Address" Label="Contract Address" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.CountryOfResidence" Label="Country Of Residence" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.PhoneNumber" Label="Phone Number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.Email" Label="Contact Email" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.EmployeeWalletAddress" Label="Employee Wallet Address" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.CompanyWalletAddress" Label="Employer Wallet Address" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.CountryOfResidence" Label="Country Of Residence" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>

            <MudTextField @bind-Value="contract.ContractDetails.ContractExpiry" Label="Contract Expiry" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.ContractDetails.GrossSalary" Label="Gross Salary" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.ContractDetails.PaymentTerm" Label="Payment Term" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.ContractDetails.BalanceUnit" Label="Balance Unit" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="contract.ContractDetails.RemoteLocation" Label="Remote Location" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>


            <br />
            <MudButton Variant="Variant.Filled" Color="Color.Success">Save Company</MudButton>
        </MudCardContent>
    </MudCard>
}

@code {
    private Contract contract = new();

    [Parameter]
    public string ContractAddress { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Http.PostAsJsonAsync($"/app/v1/1/contracts/create", contract);
            var contracts = await Http.GetFromJsonAsync<Contract[]>("sample-data/contracts.json");

            contract = contracts.FirstOrDefault(x => x.Address == ContractAddress);
        }
        catch (Exception e)
        {
        }
    }

    async Task ExecuteContract()
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

        var parameters = new DialogParameters();
        parameters.Add("ContractAddress", contract.Address);
        parameters.Add("RecipientWalletAddress", contract.EmployeeWalletAddress);


        var dialog = DialogService.Show<Dialog>("Execute Contract", parameters, maxWidth);
        var result = await dialog.Result;

        var executeContract = result.Data as ExecuteContract;

        if (!result.Cancelled)
        {
            //http://localhost:80/app/v1/contract/pay/
            await Http.PostAsJsonAsync("http://localhost:80/app/v1/contract/pay", executeContract);
        }
    }

}